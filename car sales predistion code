# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
data = pd.read_csv('car_purchasing.csv')  # Replace with your actual dataset path

# Display basic information about the dataset
print(data.info())
print(data.head())

# Define feature columns and target variable
# Update column names based on your dataset
features = ['advertising_expenditure', 'target_audience_segment', 'advertising_platform']
target = 'sales'  # Replace with the actual target variable in your dataset

X = data[features]
y = data[target]

# Identify numerical and categorical columns
numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns
categorical_cols = X.select_dtypes(include=['object']).columns

# Preprocessing for numerical data: Standardization
numerical_transformer = StandardScaler()

# Preprocessing for categorical data: One-Hot Encoding
categorical_transformer = OneHotEncoder(handle_unknown='ignore')

# Combine preprocessors in a column transformer
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, numerical_cols),
        ('cat', categorical_transformer, categorical_cols)
    ])

# Create a pipeline for preprocessing and model training
model = RandomForestRegressor(n_estimators=100, random_state=42)
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('model', model)
])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the pipeline
pipeline.fit(X_train, y_train)

# Make predictions
y_pred = pipeline.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# Save results to a CSV (optional)
results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
results.to_csv('sales_predictions.csv', index=False)

# Save pipeline (optional)
import joblib
joblib.dump(pipeline, 'sales_prediction_model.pkl')

print("Model training and evaluation completed successfully.")
